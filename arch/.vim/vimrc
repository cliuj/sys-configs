call plug#begin('~/.vim/plugged')
  Plug 'elixir-editors/vim-elixir'
  Plug 'rust-lang/rust.vim'
  Plug 'rhysd/vim-crystal'
  Plug 'vim-ruby/vim-ruby'
  Plug 'fatih/vim-go'
  Plug 'pangloss/vim-javascript'
  Plug 'ElmCast/elm-vim'
  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/fzf.vim'
  Plug 'lervag/vimtex'
  Plug 'jiangmiao/auto-pairs'
  Plug 'ervandew/supertab'
  Plug 'dense-analysis/ale'
call plug#end()

syntax on
set t_Co=256

set number

" Backspace
set backspace=indent,eol,start

" Tabbing
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent

" Set tabbing to 2 if using the following extensions
autocmd Filetype html,javascript,vue,json,ruby,css,eex,exs,ex,vim,tex,Dockerfile,yaml :setlocal tabstop=2 shiftwidth=2 expandtab smarttab autoindent 
autocmd Filetype tex,txt :setlocal nonumber | :Goyo

" Highlight colors for {} [] ()
hi MatchParen cterm=NONE ctermfg=NONE ctermfg=000000

" Swap files
set nobackup
set noswapfile

" Disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Hotkey to check highlight groups
nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Change cursor to beam when entering insert mode
let &t_SI = "\<esc>[5 q"
let &t_SR = "\<esc>[5 q"
let &t_EI = "\<esc>[2 q"

" tmux change cursor
if exists('$TMUX')
  let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[5 q\<Esc>\\"
  let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
  autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033[0 q\033\\"
else
  let &t_SI .= "\<Esc>[5 q"
  let &t_EI .= "\<Esc>[2 q"
  autocmd VimLeave * silent !echo -ne "\033[0 q"
endif

"Remap Shift-j to move down 1 paragraph
map <S-j> }

"Remap Shift-k to move up 1 paragraph
map <S-k> {

" Remap Ctrl-o to fzf ripgrep for files
nnoremap <C-o> :Files<Cr>

" Remap Ctrl-f to fzf ripgrep for words
nnoremap <C-f> :Lines<Cr>

" Remap Ctrl-g to fzf.vim prompt
noremap <C-g> :FZF<Cr>

" Add fzf line completion
imap <S-Tab> <plug>(fzf-complete-line)

let g:ale_set_highlights = 0

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10new' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" splitting
set splitbelow
set splitright

map <space> <C-W>
